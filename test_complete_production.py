#!/usr/bin/env python3
"""
üé∞ COMPLETE PRODUCTION TEST - LADBROKES REVIEW
Final production test with all environment variables properly configured

COMPREHENSIVE FIXES:
1. ‚úÖ WordPress credentials (all variants)
2. ‚úÖ Supabase configuration from MCP setup
3. ‚úÖ Tavily API key verification
4. ‚úÖ Selective feature enabling to avoid known issues
5. ‚úÖ Complete error handling and debugging
"""

import asyncio
import os
import sys
import logging
from datetime import datetime
from pathlib import Path

# Add the src directory to the path
sys.path.append(str(Path(__file__).parent / "src"))
sys.path.append(str(Path(__file__).parent))

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def complete_production_test():
    """Complete production test with full environment setup"""
    print("üöÄ COMPLETE PRODUCTION TEST - LADBROKES CASINO REVIEW")
    print("üîß Setting up ALL environment variables...")
    
    # ‚úÖ COMPLETE ENVIRONMENT SETUP
    
    # WordPress Configuration (multiple variations)
    wordpress_site_url = os.environ.get('WORDPRESS_SITE_URL', 'https://www.crashcasino.io')
    wordpress_username = os.environ.get('WORDPRESS_USERNAME', 'nmlwh')
    wordpress_app_password = os.environ.get('WORDPRESS_APP_PASSWORD')
    
    # Set all WordPress environment variable variations
    os.environ['WORDPRESS_SITE_URL'] = wordpress_site_url
    os.environ['WORDPRESS_URL'] = wordpress_site_url  # Alternative
    os.environ['WORDPRESS_USERNAME'] = wordpress_username
    if wordpress_app_password:
        os.environ['WORDPRESS_PASSWORD'] = wordpress_app_password  # Fix the variable name mismatch
        os.environ['WORDPRESS_APP_PASSWORD'] = wordpress_app_password
    
    # Supabase Configuration (from MCP setup)
    supabase_url = 'https://ambjsovdhizjxwhhnbtd.supabase.co'
    supabase_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFtYmpzb3ZkaGl6anh3aGhuYnRkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc2Mzc2NDYsImV4cCI6MjA2MzIxMzY0Nn0.3H8N2Fk22RAV1gHzDB5pCi9GokGwroG34v15I5Cq8_g'
    
    os.environ['SUPABASE_URL'] = supabase_url
    os.environ['SUPABASE_ANON_KEY'] = supabase_key
    os.environ['SUPABASE_KEY'] = supabase_key  # Alternative
    
    # Tavily API Key Check
    tavily_key = os.environ.get('TAVILY_API_KEY')
    
    # OpenAI Configuration (from MCP setup) 
    openai_key = os.environ.get('OPENAI_API_KEY', 'your-openai-api-key-here')
    os.environ['OPENAI_API_KEY'] = openai_key
    
    # ‚úÖ ENVIRONMENT VERIFICATION
    print(f"\nüîß === ENVIRONMENT CONFIGURATION ===")
    print(f"WordPress Site URL: {wordpress_site_url}")
    print(f"WordPress Username: {wordpress_username}")
    print(f"WordPress Password: {'‚úÖ SET' if wordpress_app_password else '‚ùå MISSING'}")
    print(f"Supabase URL: {supabase_url}")
    print(f"Supabase Key: {'‚úÖ SET' if supabase_key else '‚ùå MISSING'}")
    print(f"Tavily API Key: {'‚úÖ SET' if tavily_key else '‚ùå MISSING'}")
    print(f"OpenAI API Key: {'‚úÖ SET' if openai_key else '‚ùå MISSING'}")
    
    # ‚úÖ UNIVERSAL RAG CHAIN INITIALIZATION
    print(f"\nüöÄ Initializing Universal RAG Chain...")
    try:
        from src.chains.universal_rag_lcel import UniversalRAGChain
        
        # Initialize with all working features
        chain = UniversalRAGChain(
            model_name='gpt-4.1-mini',
            temperature=0.1,
            enable_caching=True,
            enable_contextual_retrieval=True,
            enable_prompt_optimization=True,
            enable_enhanced_confidence=True,
            enable_template_system_v2=True,
            enable_dataforseo_images=False,  # Disable - causing keyword errors
            enable_wordpress_publishing=True,  # ‚úÖ ENABLE with proper credentials
            enable_fti_processing=True,
            enable_security=True,
            enable_profiling=True,
            enable_web_search=False,  # Disable - Tavily API issues
            enable_comprehensive_web_research=True,  # ‚úÖ ENABLE - This works
            enable_screenshot_evidence=False,  # Disable - bucket issues
            enable_hyperlink_generation=True
        )
        
        print('‚úÖ Universal RAG Chain initialized successfully')
        
    except Exception as init_error:
        print(f'‚ùå Chain initialization failed: {init_error}')
        import traceback
        traceback.print_exc()
        return
    
    # ‚úÖ OPTIMIZED LADBROKES QUERY
    print(f"\nüé∞ Running Optimized Ladbrokes Review Generation...")
    
    ladbrokes_query = '''Create a comprehensive professional review of Ladbrokes Casino specifically for UK players.
    
    Include these essential sections:
    - Executive summary highlighting key findings about Ladbrokes
    - UK Gambling Commission licensing and regulatory compliance  
    - Casino games portfolio analysis (slots, live dealer, table games)
    - Mobile app and website user experience assessment
    - Welcome bonuses and promotional offers for UK players
    - Payment methods including UK-specific options
    - Customer support quality and availability
    - Security measures and responsible gambling features
    - Overall rating out of 10 with detailed justification
    - Final recommendation for UK players
    
    Focus exclusively on Ladbrokes Casino. Write in a professional tone suitable for publication as an MT Casino listing.'''
    
    try:
        # ‚úÖ EXECUTE WITH FULL DEBUGGING
        print("üéØ Executing Ladbrokes Casino Review Generation...")
        start_time = datetime.now()
        
        result = await chain.ainvoke({
            'query': ladbrokes_query,
            'question': ladbrokes_query,
            'content_type': 'individual_casino_review',
            'target_casino': 'ladbrokes',
            'publish_format': 'mt_listing'
        }, publish_to_wordpress=True)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f'‚úÖ Ladbrokes Casino Review Generated Successfully!')
        
        # ‚úÖ COMPREHENSIVE ANALYSIS
        print(f'\nüìä === PRODUCTION TEST RESULTS ===')
        print(f'‚è±Ô∏è Generation Time: {duration:.2f} seconds')
        print(f'üìä Confidence Score: {result.confidence_score:.3f}')
        print(f'üíæ Cache Status: {"HIT" if result.cached else "FRESH"}')
        print(f'üîç Research Sources: {len(result.sources)}')
        
        # WordPress Publishing Analysis
        metadata = result.metadata
        print(f'\nüìù === WORDPRESS PUBLISHING ANALYSIS ===')
        
        if metadata.get('wordpress_published'):
            print(f'üéâ WordPress Publishing: SUCCESS')
            if metadata.get('wordpress_post_id'):
                print(f'   üìù Post ID: {metadata["wordpress_post_id"]}')
            if metadata.get('wordpress_url'):
                print(f'   üåê Published URL: {metadata["wordpress_url"]}')
            if metadata.get('custom_post_type'):
                print(f'   üè∑Ô∏è Post Type: {metadata["custom_post_type"]}')
        else:
            print(f'‚ùå WordPress Publishing: FAILED')
            if 'wordpress_publishing_error' in metadata:
                print(f'   ‚ùå Error: {metadata["wordpress_publishing_error"]}')
            if 'wordpress_publishing_details' in metadata:
                print(f'   üìã Details: {metadata["wordpress_publishing_details"]}')
        
        # Content Quality Analysis
        content = result.answer
        if content:
            print(f'\nüìù === CONTENT QUALITY ANALYSIS ===')
            
            # Basic metrics
            ladbrokes_mentions = content.lower().count('ladbrokes')
            word_count = len(content.split())
            char_count = len(content)
            
            # Structure analysis
            h1_count = content.count('<h1')
            h2_count = content.count('<h2')
            h3_count = content.count('<h3')
            
            # Quality indicators
            uk_mentions = content.lower().count('uk')
            commission_mentions = content.lower().count('commission')
            
            print(f'üìä Ladbrokes mentions: {ladbrokes_mentions} (Target: ‚â•10)')
            print(f'üìä Word count: {word_count} (Target: ‚â•800)')
            print(f'üìä Character count: {char_count}')
            print(f'üìä Structure: H1({h1_count}) H2({h2_count}) H3({h3_count})')
            print(f'üìä UK focus: {uk_mentions} UK mentions')
            print(f'üìä Regulatory focus: {commission_mentions} commission mentions')
            
            # Quality score
            quality_score = 0
            if ladbrokes_mentions >= 10: quality_score += 25
            if word_count >= 800: quality_score += 25  
            if h2_count >= 5: quality_score += 25
            if uk_mentions >= 5: quality_score += 25
            
            print(f'üéØ Content Quality Score: {quality_score}/100')
            
            # Show content preview
            print(f'\nüìÑ === CONTENT PREVIEW ===')
            print('=' * 80)
            preview = content[:800] + '...' if len(content) > 800 else content
            print(preview)
            print('=' * 80)
        
        # Feature Performance Analysis
        print(f'\n‚öôÔ∏è === FEATURE PERFORMANCE ANALYSIS ===')
        
        features_used = []
        if metadata.get('template_system_v2_used'): features_used.append('Template System v2.0')
        if metadata.get('contextual_retrieval_used'): features_used.append('Contextual Retrieval')
        if metadata.get('web_research_used'): features_used.append('Web Research')
        if metadata.get('hyperlink_generation_used'): features_used.append('Hyperlink Generation')
        if metadata.get('prompt_optimization_used'): features_used.append('Prompt Optimization')
        
        print(f'‚úÖ Active Features: {", ".join(features_used) if features_used else "Basic generation only"}')
        
        # Final assessment
        print(f'\nüèÜ === FINAL ASSESSMENT ===')
        
        success_indicators = 0
        total_indicators = 5
        
        if result.confidence_score >= 0.7: 
            print(f'‚úÖ High Confidence Score ({result.confidence_score:.3f})')
            success_indicators += 1
        else:
            print(f'‚ö†Ô∏è Low Confidence Score ({result.confidence_score:.3f})')
            
        if len(result.sources) >= 5:
            print(f'‚úÖ Good Research Sources ({len(result.sources)})')
            success_indicators += 1
        else:
            print(f'‚ö†Ô∏è Limited Research Sources ({len(result.sources)})')
            
        if ladbrokes_mentions >= 10:
            print(f'‚úÖ Good Casino Focus ({ladbrokes_mentions} mentions)')
            success_indicators += 1
        else:
            print(f'‚ö†Ô∏è Weak Casino Focus ({ladbrokes_mentions} mentions)')
            
        if word_count >= 800:
            print(f'‚úÖ Adequate Length ({word_count} words)')
            success_indicators += 1
        else:
            print(f'‚ö†Ô∏è Short Content ({word_count} words)')
            
        if metadata.get('wordpress_published'):
            print(f'‚úÖ WordPress Publishing Success')
            success_indicators += 1
        else:
            print(f'‚ùå WordPress Publishing Failed')
        
        overall_score = (success_indicators / total_indicators) * 100
        print(f'\nüéØ OVERALL SUCCESS RATE: {overall_score:.1f}% ({success_indicators}/{total_indicators})')
        
        if overall_score >= 80:
            print(f'üéâ PRODUCTION READY: System performing excellently!')
        elif overall_score >= 60:
            print(f'‚ö†Ô∏è NEEDS IMPROVEMENT: Some issues to address')
        else:
            print(f'‚ùå MAJOR ISSUES: Significant problems need fixing')
        
        return result
        
    except Exception as generation_error:
        print(f'‚ùå Review generation failed: {generation_error}')
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(complete_production_test()) 