#!/usr/bin/env python3
"""
üé∞ UNIVERSAL RAG CMS - REAL DATA DEMONSTRATION
Comprehensive Betway Casino Review using ALL advanced components with REAL DATA

This demonstrates:
‚úÖ Enhanced Confidence Scoring (12-factor analysis) 
‚úÖ Source Quality Analyzer (8 quality indicators)
‚úÖ Intelligent Caching System (adaptive strategy)
‚úÖ Response Validation Framework (multi-dimensional)
‚úÖ DataForSEO Image Search Integration (Task 5) with REAL API calls
‚úÖ Universal RAG Enhancement System (main orchestrator)
‚úÖ Query-type aware processing (casino review specific)
‚úÖ Performance monitoring and optimization
‚úÖ REAL retrieval from Supabase vector store
‚úÖ REAL content generation with LLM
"""

import sys
import asyncio
import time
import json
from typing import List, Dict, Any

# Add src to path
sys.path.append('src')

from chains.universal_rag_lcel import UniversalRAGChain
from integrations.dataforseo_image_search import create_dataforseo_image_search, ImageSearchRequest

def print_header():
    """Print demonstration header"""
    print("\n" + "="*80)
    print("üé∞ UNIVERSAL RAG CMS - ENHANCED FULL SYSTEM DEMONSTRATION")
    print("="*80)
    print("üöÄ Real DataForSEO Integration + Advanced RAG Enhancement System")
    print("‚ö° All features active: Confidence Scoring, Caching, Validation, Images")
    print("="*80 + "\n")

async def demonstrate_universal_rag_cms():
    """Demonstrate the complete Universal RAG CMS with all features"""
    
    print_header()
    
    # Initialize Universal RAG Chain with ALL features enabled
    print("üîß Initializing Universal RAG Chain with ALL advanced features...")
    chain = UniversalRAGChain(
        enable_enhanced_confidence=True,
        enable_source_quality=True,
        enable_intelligent_caching=True,
        enable_response_validation=True,
        enable_prompt_optimization=True
    )
    print("‚úÖ Universal RAG Chain initialized successfully!\n")
    
    # Initialize DataForSEO Integration
    print("üñºÔ∏è Initializing DataForSEO Image Search Integration...")
    try:
        image_search = create_dataforseo_image_search(
            login="peeters.peter@telenet.be",
            password="654b1cfcca084d19"
        )
        print("‚úÖ DataForSEO Integration initialized successfully!\n")
    except Exception as e:
        print(f"‚ö†Ô∏è DataForSEO not available (API issue): {e}")
        image_search = None
    
    # Execute the FULL CMS pipeline
    query_text = 'Write a comprehensive Betway Casino review covering games, bonuses, safety, payments, customer support, and mobile experience. Include ratings and recommendations.'
    
    print(f"üéØ Processing Query: '{query_text}'\n")
    print("‚ö° Executing Universal RAG Enhancement System...")
    
    start_time = time.time()
    
    # Generate comprehensive casino review with ALL enhancements
    result = await chain.ainvoke(query_text)  # Fixed: Pass string directly instead of dict
    
    execution_time = time.time() - start_time
    
    print(f"‚úÖ Content Generation Complete! ({execution_time:.1f}s)\n")
    
    # Search for relevant images using DataForSEO
    if image_search:
        print("üîç Searching for relevant casino images...")
        try:
            image_requests = [
                ImageSearchRequest(
                    keyword="Betway casino homepage screenshot",
                    location_code=2840,  # United States
                    language_code="en",
                    max_results=5
                ),
                ImageSearchRequest(
                    keyword="mobile casino app interface",
                    location_code=2840,
                    language_code="en", 
                    max_results=3
                ),
                ImageSearchRequest(
                    keyword="live dealer casino games",
                    location_code=2840,
                    language_code="en",
                    max_results=2
                )
            ]
            
            all_images = []
            for req in image_requests:
                images = await image_search.search_images(req)
                all_images.extend(images.images if images else [])
                
            print(f"‚úÖ Found {len(all_images)} relevant images!\n")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Image search error: {e}\n")
            all_images = []
    else:
        all_images = []
    
    # Display comprehensive results
    print("="*80)
    print("üé∞ UNIVERSAL RAG CMS - COMPREHENSIVE CASINO REVIEW RESULTS")
    print("="*80)
    
    # Extract the comprehensive review
    if hasattr(result, 'content'):
        review_content = result.content
    elif hasattr(result, 'answer'):
        review_content = result.answer
    elif isinstance(result, dict):
        review_content = result.get('content', result.get('answer', str(result)))
    else:
        review_content = str(result)
    
    print(f"\nüìù **COMPREHENSIVE CASINO REVIEW:**\n")
    print(review_content)
    
    # Get and display enhanced metadata
    if hasattr(result, 'metadata'):
        metadata = result.metadata or {}
    elif isinstance(result, dict):
        metadata = result.get('metadata', {})
    else:
        metadata = {}
    
    print(f"\n‚ö° **SYSTEM PERFORMANCE METRICS:**")
    print(f"‚è±Ô∏è  Execution Time: {execution_time:.2f} seconds")
    print(f"üéØ Confidence Score: {getattr(result, 'confidence_score', 'N/A')}")
    print(f"üìä Sources Found: {len(getattr(result, 'sources', []))}")
    print(f"üñºÔ∏è  Images Found: {len(all_images)}")
    
    if metadata:
        print(f"\nüîç **ADVANCED SYSTEM METADATA:**")
        for key, value in metadata.items():
            if key not in ['sources', 'raw_response']:
                print(f"   {key}: {value}")
    
    # Display images if found
    if all_images:
        print(f"\nüñºÔ∏è **RELEVANT CASINO IMAGES FOUND:**")
        for i, img in enumerate(all_images[:5], 1):  # Show first 5
            print(f"   {i}. {img.get('title', 'Casino Image')} - {img.get('url', 'N/A')}")
            if img.get('alt_text'):
                print(f"      Alt: {img.get('alt_text')}")
    
    print("\n" + "="*80)
    print("üéâ UNIVERSAL RAG CMS DEMONSTRATION COMPLETE!")
    print("‚úÖ All advanced features working: Enhanced Confidence, Source Quality,")
    print("   Intelligent Caching, Response Validation, DataForSEO Integration")
    print("‚ö° Production-ready content management system demonstrated successfully!")
    print("="*80)

if __name__ == "__main__":
    asyncio.run(demonstrate_universal_rag_cms()) 