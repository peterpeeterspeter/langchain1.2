#!/usr/bin/env python3
"""
🎰 COMPLETE CASINO REVIEW DISPLAY
Shows the full review generated by our enhanced 95-field integration system
"""

import asyncio
import sys
import os

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from chains.universal_rag_lcel import create_universal_rag_chain

async def show_complete_review():
    """Generate and display the complete casino review"""
    
    print("🎰 GENERATING COMPLETE CASINO REVIEW")
    print("=" * 80)
    print("🔍 Using Enhanced 95-Field Integration System")
    print("🏆 All 8 categories (95 fields) + Major casino review sites")
    print()
    
    # Initialize the enhanced RAG chain
    rag_chain = create_universal_rag_chain(
        model_name="gpt-4o-mini",
        enable_comprehensive_web_research=True,  # 95-field research
        enable_template_system_v2=True,          # Casino-specific templates
        enable_web_search=True,                  # Tavily search
        enable_dataforseo_images=True,           # Image integration
        enable_enhanced_confidence=True          # Confidence scoring
    )
    
    # Test query for comprehensive casino analysis
    test_query = "Comprehensive analysis of Betway Casino including licensing trustworthiness games software bonuses promotions payment methods user experience mobile support"
    
    print(f"🔍 QUERY: {test_query}")
    print()
    print("⏱️  Generating comprehensive review...")
    print()
    
    # Generate the response
    response = await rag_chain.ainvoke({"question": test_query})
    
    print("🎯 COMPLETE CASINO REVIEW:")
    print("=" * 80)
    print()
    print(response.answer)
    print()
    print("=" * 80)
    print("📊 REVIEW METADATA:")
    print(f"🎯 Confidence Score: {response.confidence_score:.3f}")
    print(f"📚 Total Sources: {len(response.sources)}")
    print(f"⏱️  Response Time: {response.response_time:.2f} seconds")
    print(f"💾 Cached: {response.cached}")
    
    # Show source breakdown
    print()
    print("🔍 SOURCE BREAKDOWN:")
    for i, source in enumerate(response.sources, 1):
        source_type = source.get('source_type', 'Unknown')
        authority = source.get('authority_score', 0.0)
        title = source.get('title', 'Unknown')[:60]
        print(f"  {i}. {source_type} - {title}... (Authority: {authority:.2f})")
    
    print()
    print("✅ COMPLETE REVIEW DISPLAYED!")

if __name__ == "__main__":
    asyncio.run(show_complete_review()) 